// external dependencies
const system = require('system');
const webpage = require('webpage');

// functions
function exitPhantom(error) {
  system.stderr.write(error);
  phantom.exit(error ? 1 : 0);
}

function buildErrorStackTrace(errorMessage, stackTrace) {
  var stack = [errorMessage];
  var message;

  if (stackTrace && stackTrace.length) {
    stack.push('Stack:');

    stackTrace.forEach(function(trace) {
      message = '  at ' + (trace.file || trace.sourceURL) + ': ' + trace.line +
        ' (in function ' + trace.function + ')';
      stack.push(message);
    });
  }

  return stack.join('\n');
}

function createPageSection(content, height) {
  return {
    height: height,
    contents: phantom.callback(function(pageNum, numPages) {
      return content.replace(/{{pageNumber}}/g, pageNum)
        .replace(/{{totalPages}}/g, numPages);
    })
  };
}

function extractPageHeaderAndFooter(page, className) {
  return page.evaluate(function() {
    var elements = {};
    var styles = '';
    var header;
    var footer;

    // attempt to retrieve the header
    header = document.querySelector('header');
    elements.header = header ? header.outerHTML : '';

    // attempt to retrieve the footer
    footer = document.querySelector('footer');
    elements.footer = footer ? footer.outerHTML : '';

    // attempt to retrieve the styles
    styles = document.querySelector('style');
    styles = styles ? styles.outerHTML : '';

    // stuff the styles into the header and footer
    elements.header = styles + ' ' + elements.header;
    elements.footer = styles + ' ' + elements.footer;

    // remove the header and the footer
    header.parentNode.removeChild(header);
    footer.parentNode.removeChild(footer);

    // finally, return the known elements
    return elements;
  });
}

function generatePDF(pdfReport) {
  const timeoutInterval = pdfReport.options.timeout + 2000;
  const options = pdfReport.options;

  // create a new webpage
  var page = webpage.create();
  var assetsDirectory = null;

  // setup some variables
  if (pdfReport.options.hasOwnProperty('assetsDirectory') &&
    pdfReport.options.assetsDirectory.trim().length) {
    assetsDirectory = pdfReport.options.assetsDirectory;
  }

  // setup some of the default page attributes
  page.setContent(pdfReport.html, assetsDirectory);

  // setup a few event listeners
  page.onError = function(errorMessage, stackTrace) {
    return exitPhantom(buildErrorStackTrace('PhantomJS - ' + errorMessage,
      stackTrace));
  };

  page.onLoadFinished = function(status) {

    function onPageReady() {
      const elements = extractPageHeaderAndFooter(page);

      page.paperSize = {
        height: options.height,
        width: options.width,
        format: 'Letter',
        orientation: options.orientation,
        header: createPageSection(elements.header, options.header.height),
        footer: createPageSection(elements.footer, options.footer.height),
        zoomFactor: 1
      };

      page.render(pdfReport.fileName, {
        type: 'pdf',
        quality: options.quality
      });

      exitPhantom();
    }

    function waitForPageToFinishLoading() {
      setTimeout(function() {
        const readyState = page.evaluate(function() {
          return document.readyState;
        });

        if (readyState === 'complete') {
          return onPageReady();
        }

        return waitForPageToFinishLoading();
      }, 10);
    }

    waitForPageToFinishLoading();
  };

  // setup a timer to kill this process if it takes too long
  setTimeout(function() {
    exitPhantom('Forced timeout');
  }, timeoutInterval);
}

// setup a few event listeners to make our lives easier
phantom.onError = function(errorMessage, stackTrace) {
  return exitPhantom(buildErrorStackTrace('PhantomJS - ' + errorMessage,
    stackTrace));
};

// execute the script's main logic
const pdfReport = JSON.parse(system.stdin.readLine());

// make sure we received everything
if (!pdfReport.hasOwnProperty('html')) {
  exitPhantom('PhantomJS - Did not receive HTML');
} else if (!pdfReport.hasOwnProperty('options')) {
  exitPhantom('PhantomJS - Did not receive options');
} else if (!pdfReport.hasOwnProperty('fileName')) {
  exitPhantom('PhantomJS - Did not receive fileName');
}

// now, everything looks good so generate the PDF
generatePDF(pdfReport);
